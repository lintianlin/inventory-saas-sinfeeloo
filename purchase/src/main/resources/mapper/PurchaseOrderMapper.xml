<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sinfeeloo.inventory.mapper.PurchaseOrderMapper">
    <resultMap id="BaseResultMap" type="com.sinfeeloo.inventory.entity.PurchaseOrder">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Thu May 03 10:36:58 CST 2018.
        -->
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="goodsId" property="goodsid" jdbcType="INTEGER"/>
        <result column="supplierId" property="supplierid" jdbcType="INTEGER"/>
        <result column="supplierName" property="suppliername" jdbcType="VARCHAR"/>
        <result column="repoId" property="repoid" jdbcType="INTEGER"/>
        <result column="orderNumber" property="ordernumber" jdbcType="VARCHAR"/>
        <result column="count" property="count" jdbcType="INTEGER"/>
        <result column="unitPrice" property="unitprice" jdbcType="DECIMAL"/>
        <result column="totalPrice" property="totalprice" jdbcType="DECIMAL"/>
        <result column="employeeId" property="employeeid" jdbcType="INTEGER"/>
        <result column="descs" property="descs" jdbcType="VARCHAR"/>
        <result column="checkState" property="checkstate" jdbcType="INTEGER"/>
        <result column="checkResult" property="checkresult" jdbcType="VARCHAR"/>
        <result column="checkAccount" property="checkaccount" jdbcType="VARCHAR"/>
        <result column="checktime" property="checktime" jdbcType="TIMESTAMP"/>
        <result column="taketime" property="taketime" jdbcType="TIMESTAMP"/>
        <result column="creater" property="creater" jdbcType="VARCHAR"/>
        <result column="creatime" property="creatime" jdbcType="TIMESTAMP"/>
        <result column="updater" property="updater" jdbcType="VARCHAR"/>
        <result column="updatime" property="updatime" jdbcType="TIMESTAMP"/>
        <result column="state" property="state" jdbcType="INTEGER"/>
        <result column="type" property="type" jdbcType="INTEGER"/>

        <result column="goodsName" property="goodsName" jdbcType="VARCHAR"/>
        <result column="storageName" property="storageName" jdbcType="VARCHAR"/>
        <result column="checktimeStr" property="checktimeStr" jdbcType="VARCHAR"/>
        <result column="taketimeStr" property="taketimeStr" jdbcType="VARCHAR"/>
        <result column="creatimeStr" property="creatimeStr" jdbcType="VARCHAR"/>
        <result column="updatimeStr" property="updatimeStr" jdbcType="VARCHAR"/>
        <result column="operator" property="operator" jdbcType="VARCHAR"/>
    </resultMap>
    <!--添加-->
    <insert id="insert" parameterType="com.sinfeeloo.inventory.entity.PurchaseOrder">
        insert into lz_purchase_order (id, goodsId, supplierId,
           repoId, orderNumber,
          count, unitPrice, totalPrice,
          employeeId, descs, checkState,
          checkResult, checkAccount, checktime,
          taketime, creater, creatime,
          updater, updatime, state,
          type)
        values (#{id,jdbcType=INTEGER}, #{goodsid,jdbcType=INTEGER}, #{supplierid,jdbcType=INTEGER},
          #{repoid,jdbcType=INTEGER}, #{ordernumber,jdbcType=VARCHAR},
          #{count,jdbcType=INTEGER}, #{unitprice,jdbcType=DECIMAL}, #{totalprice,jdbcType=DECIMAL},
          #{employeeid,jdbcType=INTEGER}, #{descs,jdbcType=VARCHAR}, #{checkstate,jdbcType=INTEGER},
          #{checkresult,jdbcType=VARCHAR}, #{checkaccount,jdbcType=VARCHAR}, #{checktime,jdbcType=TIMESTAMP},
          now(), #{creater,jdbcType=VARCHAR}, now(),
          #{updater,jdbcType=VARCHAR}, now(), #{state,jdbcType=INTEGER},
          #{type,jdbcType=INTEGER})
  </insert>
    <!--修改-->
    <update id="updateByPrimaryKey" parameterType="com.sinfeeloo.inventory.entity.PurchaseOrder">
        update lz_purchase_order
        set goodsId = #{goodsid,jdbcType=INTEGER},
        supplierId = #{supplierid,jdbcType=INTEGER},
        repoId = #{repoid,jdbcType=INTEGER},
        count = #{count,jdbcType=INTEGER},
        unitPrice = #{unitprice,jdbcType=DECIMAL},
        totalPrice = #{totalprice,jdbcType=DECIMAL},
        employeeId = #{employeeid,jdbcType=INTEGER},
        descs = #{descs,jdbcType=VARCHAR},
        updater = #{updater,jdbcType=VARCHAR},
        updatime = now()
        where id = #{id,jdbcType=INTEGER}
        AND state = 1
    </update>

    <!--更新审核状态-->
    <update id="updateCheckState" parameterType="com.sinfeeloo.inventory.entity.PurchaseOrder">
        update lz_purchase_order
        set
        checkState = #{checkstate,jdbcType=INTEGER},
        checkResult = #{checkresult,jdbcType=VARCHAR},
        checkAccount = #{checkaccount,jdbcType=VARCHAR},
        checktime = now(),
        taketime = #{taketime,jdbcType=TIMESTAMP},
        updater = #{updater,jdbcType=VARCHAR},
        updatime = now()
        where id = #{id,jdbcType=INTEGER}
        AND state = 1
    </update>
    <!--采购订单分页查询-->
    <select id="selectOrderListByPage" resultMap="BaseResultMap">
        SELECT
        o.id,
        o.goodsId,
        g.`name` AS goodsName,
        o.supplierId,
        s.name AS supplierName,
        o.repoId,
        r.`name` AS storageName,
        o.orderNumber,
        o.count,
        o.unitPrice,
        o.totalPrice,
        o.employeeId,
        e.`name` AS operator,
        o.descs,
        o.checkState,
        o.checkResult,
        o.checkAccount,
        o.checktime,
        DATE_FORMAT(
        o.checktime,
        '%Y-%m-%d %H:%i:%s'
        ) AS checktimeStr,
        o.taketime,
        DATE_FORMAT(
        o.taketime,
        '%Y-%m-%d %H:%i:%s'
        ) AS taketimeStr,
        o.creater,
        o.creatime,
        DATE_FORMAT(
        o.creatime,
        '%Y-%m-%d %H:%i:%s'
        ) AS creatimeStr,
        o.updater,
        o.updatime,
        DATE_FORMAT(
        o.updatime,
        '%Y-%m-%d %H:%i:%s'
        ) AS updatimeStr,
        o.type
        FROM
        lz_purchase_order o
        LEFT JOIN lz_base_goods g ON o.goodsId = g.id AND g.state =1
        LEFT JOIN lz_base_repo r ON o.repoId = r.id AND r.state =1
        LEFT JOIN lz_base_employee e ON o.employeeId = e.id AND e.state = 1
        LEFT JOIN lz_purchase_supplier s ON o.supplierId = s.id AND s.state = 1
        WHERE
        o.state = 1
        <if test="goodsName != null and goodsName!=''">
            AND g.`name` LIKE CONCAT ('%',#{goodsName},'%' )
        </if>
        <if test="type != null and type!=''">
            AND o.type =#{type}
        </if>
        <if test="orderNumber != null and orderNumber!=''">
            AND o.orderNumber LIKE CONCAT ('%',#{orderNumber},'%' )
        </if>
        <if test="supplierName != null and supplierName!=''">
            AND s.name LIKE CONCAT ('%',#{supplierName},'%' )
        </if>
        <if test="repoId != null and repoId!=''">
            AND o.repoId =#{repoId}
        </if>
        <if test="operator != null and operator!=''">
            AND (o.employeeId LIKE CONCAT ('%',#{operator},'%' ) OR e.`name` LIKE CONCAT ('%',#{operator},'%' ))
        </if>
        <if test="checkState != null and checkState!=''">
            AND o.checkState =#{checkState}
        </if>
        <if test="startTime != null and startTime!=''">
            AND o.taketime <![CDATA[ >= ]]> #{startTime}
        </if>
        <if test="endTime != null and endTime!=''">
            AND o.taketime <![CDATA[ <= ]]> #{endTime}
        </if>
        ORDER BY ${sortCode} ${sortRole}
        limit #{limit} offset #{offset}
    </select>
    <!--采购订单分页数量-->
    <select id="selectOrderListCount" resultType="long">
        SELECT
        count(1)
        FROM
        lz_purchase_order o
        LEFT JOIN lz_base_goods g ON o.goodsId = g.id
        LEFT JOIN lz_base_repo r ON o.repoId = r.id
        LEFT JOIN lz_base_employee e ON o.employeeId = e.id
        LEFT JOIN lz_purchase_supplier s ON o.supplierId = s.id
        WHERE
        o.state = 1
        <if test="goodsName != null and goodsName!=''">
            AND g.`name` LIKE CONCAT ('%',#{goodsName},'%' )
        </if>
        <if test="type != null and type!=''">
            AND o.type =#{type}
        </if>
        <if test="orderNumber != null and orderNumber!=''">
            AND o.orderNumber =#{orderNumber}
        </if>
        <if test="supplierName != null and supplierName!=''">
            AND s.name LIKE CONCAT ('%',#{supplierName},'%' )
        </if>
        <if test="repoId != null and repoId!=''">
            AND o.repoId =#{repoId}
        </if>
        <if test="operator != null and operator!=''">
            AND (o.employeeId LIKE CONCAT ('%',#{operator},'%' ) OR e.`name` LIKE CONCAT ('%',#{operator},'%' ))
        </if>
        <if test="checkState != null and checkState!=''">
            AND o.checkState =#{checkState}
        </if>
        <if test="startTime != null and startTime!=''">
            AND o.taketime <![CDATA[ >= ]]> #{startTime}
        </if>
        <if test="endTime != null and endTime!=''">
            AND o.taketime <![CDATA[ <= ]]> #{endTime}
        </if>
    </select>

    <!--删除-->
    <update id="deleteByPrimaryKey" parameterType="com.sinfeeloo.inventory.entity.PurchaseOrder">
        update lz_purchase_order
        set state = 0,
        updater = #{updater,jdbcType=VARCHAR},
        updatime = now()
        where id = #{id,jdbcType=INTEGER}
        AND state = 1
    </update>


    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
         SELECT
        o.id,
        o.goodsId,
        g.`name` AS goodsName,
        o.supplierId,
        s.name AS supplierName,
        o.repoId,
        r.`name` AS storageName,
        o.orderNumber,
        o.count,
        o.unitPrice,
        o.totalPrice,
        o.employeeId,
        e.`name` AS operator,
        o.descs,
        o.checkState,
        o.checkResult,
        o.checkAccount,
        o.checktime,
        DATE_FORMAT(
        o.checktime,
        '%Y-%m-%d %H:%i:%s'
        ) AS checktimeStr,
        o.taketime,
        DATE_FORMAT(
        o.taketime,
        '%Y-%m-%d %H:%i:%s'
        ) AS taketimeStr,
        o.creater,
        o.creatime,
        DATE_FORMAT(
        o.creatime,
        '%Y-%m-%d %H:%i:%s'
        ) AS creatimeStr,
        o.updater,
        o.updatime,
        DATE_FORMAT(
        o.updatime,
        '%Y-%m-%d %H:%i:%s'
        ) AS updatimeStr,
        o.type
        FROM
        lz_purchase_order o
        LEFT JOIN lz_base_goods g ON o.goodsId = g.id AND g.state =1
        LEFT JOIN lz_base_repo r ON o.repoId = r.id AND r.state =1
        LEFT JOIN lz_base_employee e ON o.employeeId = e.id AND e.state = 1
        LEFT JOIN lz_purchase_supplier s ON o.supplierId = s.id AND s.state = 1
        where o.id = #{id,jdbcType=INTEGER}
    </select>











    <!--审核：采购订单分页查询-->
    <select id="selectCheckOrderListByPage" resultMap="BaseResultMap">
        SELECT
        o.id,
        o.goodsId,
        g.`name` AS goodsName,
        o.supplierId,
        s.name AS supplierName,
        o.repoId,
        r.`name` AS storageName,
        o.orderNumber,
        o.count,
        o.unitPrice,
        o.totalPrice,
        o.employeeId,
        e.`name` AS operator,
        o.descs,
        o.checkState,
        o.checkResult,
        o.checkAccount,
        o.checktime,
        DATE_FORMAT(
        o.checktime,
        '%Y-%m-%d %H:%i:%s'
        ) AS checktimeStr,
        o.taketime,
        DATE_FORMAT(
        o.taketime,
        '%Y-%m-%d %H:%i:%s'
        ) AS taketimeStr,
        o.creater,
        o.creatime,
        DATE_FORMAT(
        o.creatime,
        '%Y-%m-%d %H:%i:%s'
        ) AS creatimeStr,
        o.updater,
        o.updatime,
        DATE_FORMAT(
        o.updatime,
        '%Y-%m-%d %H:%i:%s'
        ) AS updatimeStr,
        o.type
        FROM
        lz_purchase_order o
        LEFT JOIN lz_base_goods g ON o.goodsId = g.id
        LEFT JOIN lz_base_repo r ON o.repoId = r.id
        LEFT JOIN lz_base_employee e ON o.employeeId = e.id
        LEFT JOIN lz_purchase_supplier s ON o.supplierId = s.id
        WHERE
        o.state = 1
        AND  o.checkState = 4
        <if test="goodsName != null and goodsName!=''">
            AND g.`name` LIKE CONCAT ('%',#{goodsName},'%' )
        </if>
        <if test="type != null and type!=''">
            AND o.type =#{type}
        </if>
        <if test="orderNumber != null and orderNumber!=''">
            AND o.orderNumber =#{orderNumber}
        </if>
        <if test="supplierName != null and supplierName!=''">
            AND s.name LIKE CONCAT ('%',#{supplierName},'%' )
        </if>
        <if test="repoId != null and repoId!=''">
            AND o.repoId =#{repoId}
        </if>
        <if test="operator != null and operator!=''">
            AND (o.employeeId LIKE CONCAT ('%',#{operator},'%' ) OR e.`name` LIKE CONCAT ('%',#{operator},'%' ))
        </if>
        <if test="startTime != null and startTime!=''">
            AND o.taketime <![CDATA[ >= ]]> #{startTime}
        </if>
        <if test="endTime != null and endTime!=''">
            AND o.taketime <![CDATA[ <= ]]> #{endTime}
        </if>
        ORDER BY ${sortCode} ${sortRole}
        limit #{limit} offset #{offset}
    </select>

    <!--审核：采购订单分页数量-->
    <select id="selectCheckOrderListCount" resultType="long">
        SELECT
        count(1)
        FROM
        lz_purchase_order o
        LEFT JOIN lz_base_goods g ON o.goodsId = g.id
        LEFT JOIN lz_base_repo r ON o.repoId = r.id
        LEFT JOIN lz_base_employee e ON o.employeeId = e.id
        LEFT JOIN lz_purchase_supplier s ON o.supplierId = s.id
        WHERE
        o.state = 1
        AND  o.checkState = 4
        <if test="goodsName != null and goodsName!=''">
            AND g.`name` LIKE CONCAT ('%',#{goodsName},'%' )
        </if>
        <if test="type != null and type!=''">
            AND o.type =#{type}
        </if>
        <if test="orderNumber != null and orderNumber!=''">
            AND o.orderNumber =#{orderNumber}
        </if>
        <if test="supplierName != null and supplierName!=''">
            AND s.name LIKE CONCAT ('%',#{supplierName},'%' )
        </if>
        <if test="repoId != null and repoId!=''">
            AND o.repoId =#{repoId}
        </if>
        <if test="operator != null and operator!=''">
            AND (o.employeeId LIKE CONCAT ('%',#{operator},'%' ) OR e.`name` LIKE CONCAT ('%',#{operator},'%' ))
        </if>
        <if test="startTime != null and startTime!=''">
            AND o.taketime <![CDATA[ >= ]]> #{startTime}
        </if>
        <if test="endTime != null and endTime!=''">
            AND o.taketime <![CDATA[ <= ]]> #{endTime}
        </if>
    </select>


</mapper>
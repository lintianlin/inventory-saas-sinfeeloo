<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sinfeeloo.inventory.mapper.StockMapper">
    <resultMap id="BaseResultMap" type="com.sinfeeloo.inventory.entity.Stock">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Thu May 03 10:43:21 CST 2018.
        -->
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="goodsId" property="goodsid" jdbcType="INTEGER"/>
        <result column="repoId" property="repoid" jdbcType="INTEGER"/>
        <result column="totalCount" property="totalcount" jdbcType="INTEGER"/>
        <result column="saleCount" property="salecount" jdbcType="INTEGER"/>
        <result column="buyPrice" property="buyprice" jdbcType="DECIMAL"/>
        <result column="avgBuyPrice" property="avgbuyprice" jdbcType="DECIMAL"/>
        <result column="salePrice" property="saleprice" jdbcType="DECIMAL"/>
        <result column="totalBuyPrice" property="totalbuyprice" jdbcType="DECIMAL"/>
        <result column="totalSalePrice" property="totalsaleprice" jdbcType="DECIMAL"/>
        <result column="updatime" property="updatime" jdbcType="TIMESTAMP"/>
        <result column="state" property="state" jdbcType="INTEGER"/>


        <result column="goodsName" property="goodsName" jdbcType="VARCHAR"/>
        <result column="goodsCode" property="goodsCode" jdbcType="VARCHAR"/>
        <result column="goodsType" property="goodsType" jdbcType="VARCHAR"/>
        <result column="goodsUnit" property="goodsUnit" jdbcType="VARCHAR"/>
        <result column="goodsStandard" property="goodsStandard" jdbcType="VARCHAR"/>
        <result column="storageName" property="storageName" jdbcType="VARCHAR"/>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Thu May 03 10:43:21 CST 2018.
        -->
        delete from lz_stock
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <!--添加-->
    <insert id="insert" parameterType="com.sinfeeloo.inventory.entity.Stock">
        insert into lz_stock (id, goodsId, repoId,
        totalCount, saleCount, buyPrice,
        avgBuyPrice, salePrice, totalBuyPrice,
        totalSalePrice, updatime, state
        )
        values (#{id,jdbcType=INTEGER}, #{goodsid,jdbcType=INTEGER}, #{repoid,jdbcType=INTEGER},
        #{totalcount,jdbcType=INTEGER}, #{salecount,jdbcType=INTEGER}, #{buyprice,jdbcType=DECIMAL},
        #{avgbuyprice,jdbcType=DECIMAL}, #{saleprice,jdbcType=DECIMAL}, #{totalbuyprice,jdbcType=DECIMAL},
        #{totalsaleprice,jdbcType=DECIMAL}, now(), #{state,jdbcType=INTEGER}
        )
    </insert>
    <update id="updateByPrimaryKey" parameterType="com.sinfeeloo.inventory.entity.Stock">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Thu May 03 10:43:21 CST 2018.
        -->
        update lz_stock
        set goodsId = #{goodsid,jdbcType=INTEGER},
        repoId = #{repoid,jdbcType=INTEGER},
        totalCount = #{totalcount,jdbcType=INTEGER},
        saleCount = #{salecount,jdbcType=INTEGER},
        buyPrice = #{buyprice,jdbcType=DECIMAL},
        avgBuyPrice = #{avgbuyprice,jdbcType=DECIMAL},
        salePrice = #{saleprice,jdbcType=DECIMAL},
        totalBuyPrice = #{totalbuyprice,jdbcType=DECIMAL},
        totalSalePrice = #{totalsaleprice,jdbcType=DECIMAL},
        updatime = #{updatime,jdbcType=TIMESTAMP},
        state = #{state,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <!--修改价格-->
    <update id="updateForPriceById" parameterType="com.sinfeeloo.inventory.entity.Stock">
        update lz_stock
        set
        avgBuyPrice = #{avgbuyprice,jdbcType=DECIMAL},
        salePrice = #{saleprice,jdbcType=DECIMAL},
        totalSalePrice = #{totalsaleprice,jdbcType=DECIMAL},
        updatime = now()
        where id = #{id,jdbcType=INTEGER}
        AND state = 1
    </update>

    <!--调拨-->
    <update id="updateForAllotById" parameterType="com.sinfeeloo.inventory.entity.Stock">
        update lz_stock
        set
        totalCount = #{totalcount,jdbcType=INTEGER},
        totalBuyPrice = #{totalbuyprice,jdbcType=DECIMAL},
        totalSalePrice = #{totalsaleprice,jdbcType=DECIMAL},
        updatime = now()
        where id = #{id,jdbcType=INTEGER}
        AND state = 1
    </update>


    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Thu May 03 10:43:21 CST 2018.
        -->
        select id, goodsId, repoId, totalCount, saleCount, buyPrice, avgBuyPrice, salePrice,
        totalBuyPrice, totalSalePrice, updatime, state
        from lz_stock
        where id = #{id,jdbcType=INTEGER}
    </select>

    <!--查询这个仓库中是否含有这个商品-->
    <select id="selectByGoodsIdAndRepoId" resultMap="BaseResultMap">
            select id, goodsId, repoId, totalCount, saleCount, buyPrice, avgBuyPrice, salePrice,
            totalBuyPrice, totalSalePrice, updatime, state
            from lz_stock
            where goodsId = #{goodsId,jdbcType=INTEGER}
            AND  repoId = #{repoId,jdbcType=INTEGER}
            AND state = 1
  </select>

    <!--分页-->
    <select id="selectStockListByPage" resultMap="BaseResultMap">
        SELECT
        s.id,
        s.goodsId,
        g.`name` AS goodsName,
        g.`code` AS goodsCode,
        g.type AS goodsType,
        g.unit AS goodsUnit,
        g.standard AS goodsStandard,
        s.repoId,
        r.`name` AS storageName,
        s.totalCount,
        s.saleCount,
        s.buyPrice,
        s.avgBuyPrice,
        s.salePrice,
        s.totalBuyPrice,
        s.totalSalePrice,
        s.updatime
        FROM
        lz_stock s
        LEFT JOIN lz_base_goods g ON s.goodsId = g.id
        LEFT JOIN lz_base_repo r ON s.repoId = r.id
        WHERE
        s.state = 1
        <if test="goodsName != null and goodsName!=''">
            AND g.`name` LIKE CONCAT ('%',#{goodsName},'%' )
        </if>
        <if test="repoId != null and repoId!=''">
            AND s.repoId = #{repoId}
        </if>
        ORDER BY ${sortCode} ${sortRole}
        limit #{limit} offset #{offset}
    </select>

    <!--分页数量-->
    <select id="selectStockListCount" resultType="long">
        SELECT
        count(1)
        FROM
        lz_stock s
        LEFT JOIN lz_base_goods g ON s.goodsId = g.id
        WHERE
        s.state = 1
        <if test="goodsName != null and goodsName!=''">
            AND g.`name` LIKE CONCAT ('%',#{goodsName},'%' )
        </if>
        <if test="repoId != null and repoId!=''">
            AND s.repoId = #{repoId}
        </if>
    </select>

</mapper>